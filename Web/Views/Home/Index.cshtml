@model Common.HomePageDto
@{
    ViewData["Title"] = "Home Page";
}
@section Styles {
    <link href="/css/index.css?v=0.0.5" rel="stylesheet" />
}
<div class="slider-container">
    <div class="slider">
        @if (Model.Carousels != null)
        {
            foreach (var Carousel in Model.Carousels)
            {

                <div class="slide">
                    <a class="CarouselLink" title="@Carousel.Title" href="@Carousel.LinkUrl">
                        <img src="@Carousel.ImageUrl" alt="@Carousel.Title">
                    </a>
                    <div class="slide-caption">
                        <a class="CarouselLink" title="@Carousel.Title" href="@Carousel.LinkUrl">@Carousel.Title</a>
                    </div>
                </div>
            }
        }
    </div>

    <div class="slider-nav">
        <button class="prev">❮</button>
        <button class="next">❯</button>
    </div>

    <div class="slider-dots">
        <div class="dot active"></div>
        <div class="dot"></div>
        <div class="dot"></div>
    </div>
</div>
<h2>@Model.NewTypeName</h2>
<div class="newhomelistpart">
    @if (Model.News != null)
    {
        foreach (var news in Model.News)
        {
            <div class="news-item">
                <a href="/New/Detail?NewId=@news.Id">@news.NewTitle</a>
                <span class="news-date">@(news.PublicTime?.ToString("yyyy-MM-dd") ?? "未发布")</span>
            </div>
        }
    }
</div>
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const slider = document.querySelector('.slider');
            const slides = document.querySelectorAll('.slide');
            const prevBtn = document.querySelector('.prev');
            const nextBtn = document.querySelector('.next');
            const dots = document.querySelectorAll('.dot');

            let currentIndex = 0;
            const slideCount = slides.length;

            // 更新幻灯片位置和指示点
            function updateSlider() {
                slider.style.transform = `translateX(-${currentIndex * 100}%)`;

                // 更新指示点
                dots.forEach((dot, index) => {
                    dot.classList.toggle('active', index === currentIndex);
                });
            }

            // 下一张幻灯片
            function nextSlide() {
                currentIndex = (currentIndex + 1) % slideCount;
                updateSlider();
            }

            // 上一张幻灯片
            function prevSlide() {
                currentIndex = (currentIndex - 1 + slideCount) % slideCount;
                updateSlider();
            }

            // 点击指示点跳转
            dots.forEach((dot, index) => {
                dot.addEventListener('click', () => {
                    currentIndex = index;
                    updateSlider();
                });
            });

            // 按钮事件
            nextBtn.addEventListener('click', nextSlide);
            prevBtn.addEventListener('click', prevSlide);

            // 自动轮播
            let slideInterval = setInterval(nextSlide, 5000);

            // 鼠标悬停时暂停自动轮播
            const sliderContainer = document.querySelector('.slider-container');
            sliderContainer.addEventListener('mouseenter', () => {
                clearInterval(slideInterval);
            });

            sliderContainer.addEventListener('mouseleave', () => {
                slideInterval = setInterval(nextSlide, 5000);
            });
        });
    </script>
}
